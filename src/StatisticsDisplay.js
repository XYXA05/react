// src/StatisticsDisplay.js
import React, { useState, useEffect } from 'react'
import axios from 'axios'
import './StatisticsDisplay.css'

const API_URL = 'http://localhost:8000'

const roleModulesMap = {
  store:                      ['store'],
  store_leader:               ['store'],
  design:                     ['design'],
  design_leader:              ['design'],
  repair_construction:        ['renovation'],
  repair_construction_leader: ['renovation'],
  cliner:                     ['cleaning'],
  cliner_leader:              ['cleaning'],
  rieltor_media_buyer:        ['mediabuyer'],
  rieltor_media_buyer_leader: ['mediabuyer'],
  realtor:                    ['store','design','renovation','cleaning','mediabuyer'],
  team_leader:                ['store','design','renovation','cleaning','mediabuyer'],
}

const moduleLabels = {
  store:      '–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω',
  design:     '–î–∏–∑–∞–π–Ω',
  renovation: '–†–µ–º–æ–Ω—Ç/–ë—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ',
  cleaning:   '–ö–ª—ñ–Ω—ñ–Ω–≥',
  mediabuyer: 'MediaBuyer',
}

export default function StatisticsDisplay({ userType, token }) {
  const [allowedModules, setAllowedModules] = useState([])
  const [selectedModule, setSelectedModule] = useState('')
  const [stats, setStats]                   = useState(null)
  const [loading, setLoading]               = useState(false)

  // figure out which modules this userType can see
  useEffect(() => {
    let mods = roleModulesMap[userType] || []
    if (mods.length === 0) {
      const base = userType?.replace(/_leader$/, '')
      mods = roleModulesMap[base] || []
    }
    setAllowedModules(mods)
    setSelectedModule(mods[0] || '')
    setStats(null)
  }, [userType])

  // fetch whenever selectedModule changes
  useEffect(() => {
    if (!selectedModule) return

    setLoading(true)
    axios
      .get(`${API_URL}/statistics/${selectedModule}`, {
        headers: { Authorization: `Bearer ${token}` }
      })
      .then(res => setStats(res.data))
      .catch(err => {
        console.error(err)
        setStats(null)
      })
      .finally(() => setLoading(false))
  }, [selectedModule, token])

  return (
    <div className="statistics-container">
      <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>

      {allowedModules.length === 0 ? (
        <p>–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.</p>
      ) : (
        <>
          <label className="module-select">
            –û–±–µ—Ä—ñ—Ç—å –º–æ–¥—É–ª—å:{' '}
            <select
              value={selectedModule}
              onChange={e => setSelectedModule(e.target.value)}
            >
              {allowedModules.map(m => (
                <option key={m} value={m}>
                  {moduleLabels[m] || m}
                </option>
              ))}
            </select>
          </label>

          {loading ? (
            <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è‚Ä¶</p>
          ) : stats ? (
            <div className="stats-block">
              {selectedModule === 'mediabuyer' ? (
                <>
                  <h4>–ö–ª—ñ—î–Ω—Ç–∏</h4>
                  <p>üîë –û—Ä–µ–Ω–¥–∞: {stats.clients_rental}</p>
                  <p>üè† –ü—Ä–æ–¥–∞–∂: {stats.clients_sale}</p>
                  <p>üì¶ –Ü–Ω—à—ñ: {stats.clients_other}</p>

                  <h4>üí∞ –ó–ê–†–û–ë–Ü–¢–û–ö</h4>
                  <p>–ó–∞ –¥–µ–Ω—å: {stats.earnings_day?.toFixed(2)} $</p>
                  <p>–ó–∞ —Ç–∏–∂–¥–µ–Ω—å: {stats.earnings_week?.toFixed(2)} $</p>
                  <p>–ó–∞ –º—ñ—Å—è—Ü—å: {stats.earnings_month?.toFixed(2)} $</p>
                  <p>–í—Å—å–æ–≥–æ: {stats.earnings_total?.toFixed(2)} $</p>
                </>
              ) : ['store', 'cleaning'].includes(selectedModule) ? (
                <>
                  <p>üì¶ –í—Å—å–æ–≥–æ: {stats.total}</p>
                  <p>‚è≥ –û—á—ñ–∫—É—é—Ç—å: {stats.pending}</p>
                  <p>‚öôÔ∏è –í –æ–±—Ä–æ–±—Ü—ñ: {stats.processing}</p>
                  <p>‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats.completed}</p>
                </>
              ) : ['design', 'renovation'].includes(selectedModule) ? (
                <p>üìã –í—Å—å–æ–≥–æ –ø—Ä–æ—î–∫—Ç—ñ–≤: {stats.total_projects}</p>
              ) : (
                <pre>{JSON.stringify(stats, null, 2)}</pre>
              )}
            </div>
          ) : (
            <p>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω—è.</p>
          )}
        </>
      )}
    </div>
  )
}
